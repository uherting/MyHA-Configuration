from https://esphome.io/guides/contributing.html#setting-up-git-environment :


ESPHome’s code-base is hosted on GitHub, and contributing is done exclusively
through “Pull Requests” (PRs) in the GitHub interface. So you need to set up
your git environment first.

When you want to create a patch for ESPHome, first go to the repository you
want to contribute to (esphome, etc) and click fork in the top right corner.
This will create a fork of the repository that you can modify and create git
branches on.

# =============================================================================
# =============================================================================
# Clone your fork
git clone https://github.com/<YOUR_GITHUB_USERNAME>/<REPO_NAME>.git
# For example: git clone https://github.com/OttoWinter/esphome.git

# Add "upstream" remote
git remote add upstream https://github.com/esphome/<REPO_NAME>.git
# For example: git remote add upstream https://github.com/esphome/esphome.git

# For each patch, create a new branch from latest dev
git checkout dev
git pull upstream dev
git checkout -b <MY_NEW_FEATURE>
# For example: git checkout -b gpio-switch-fix

# Make your modifications, then commit changes with message describing changes
git add .
git commit -m "<COMMIT_MESSAGE>"
# For example: git commit -m "Fix GPIO Switch Not Turning Off Interlocked Switches"

# Upload changes
git push -u origin <BRANCH_NAME>
# For example: git push -u origin gpio-switch-fix
# =============================================================================
# =============================================================================

Then go to your repository fork in GitHub and wait for a create pull request
message to show up in the top (alternatively go to branches and create it
from there). Fill out the Pull Request template outlining your changes; if
your PR is not ready to merge yet please mark it as a draft PR in the
dropdown of the green “create PR” button.

Review Process: ESPHome’s code base tries to have a high code standard. At the
bottom of the Pull Request you will be able to see the “Github Actions”
continuous integration check which will automatically go through your patch and
try to spot errors. If the CI check fails, please see the Github Actions log
and fix all errors that appear there. Only PRs that pass the automated checks
can be merged!

Catching up with reality: Sometimes other commits have been made to the same
files you edited. Then your changes need to be re-applied on top of the latest
changes with a “rebase”. More info here.

# Fetch the latest upstream changes and apply them
git fetch upstream dev
git rebase upstream/dev

# EOF
