# ############################################################
#
# automations for the HACS integration Battery Notes
#   for details see: https://smart-live.net/battery-notes-batteriemanagement-mit-home-assistant/
#
# ############################################################

# 1st a template
# ############################################################
#  L2 TRV run away handling by switching hvac_mode (bedroom)
# ############################################################
# - alias: L2 TRV run away handling by switching hvac_mode (bedroom)
#   id: "251c4a95-6635-448e-90e5-c2795d3b7722"
#   description: "This automation handles L2 TRV run away conditions in the L2 bedroom"
#   mode: single
#   max_exceeded: silent

#   initial_state: true
#   # --------------------- TRIGGER ---------------------
#   trigger:
#     - platform: template
#       id: "l2_trv_runaway_high_bedroom"
#       value_template: "{{
#         is_state('binary_sensor.l2_trv_runaway_precondition_high', 'on')
#         and
#         is_state('binary_sensor.l2_trv_runaway_condition_bedroom_high', 'on')
#       }}"
#     - platform: template
#       id: "l2_trv_runaway_low_bedroom"
#       value_template: "{{
#         is_state('binary_sensor.l2_trv_runaway_precondition_low', 'on')
#         and
#         is_state('binary_sensor.l2_trv_runaway_condition_bedroom_low', 'on')
#       }}"
#   # -------------------- CONDITIONS -------------------
#   # none whatsoever
#   condition: []
#   # --------------------- ACTIONS ---------------------
#   action:
#     - choose:
#         #
#         # --------------------- l2_trv_runaway_high_bedroom
#         - conditions:
#             - condition: trigger
#               id: "l2_trv_runaway_high_bedroom"
#           sequence:
#             - action: climate.set_hvac_mode
#               target:
#                 entity_id: climate.zb_trv_bedroom_l2
#               data:
#                 hvac_mode: "off"
#             - service: input_boolean.turn_on
#               target:
#                 entity_id: input_boolean.l2_trv_runaway_handling_in_progress_bedroom
#             - service: persistent_notification.create
#               data:
#                 title: "L2 TRV bedroom: turned off"
#                 message: "L2 TRV run away conditions (high temp) handled for the bedroom. Temperatures (current/target): {{ states('sensor.l2_trv_runaway_temp_bedroom_current') }}/{{ states('sensor.l2_trv_runaway_temp_bedroom_target') }}°C.Time: {{ now() }}"

#         #
#         # --------------------- l2_trv_runaway_low_bedroom
#         - conditions:
#             - condition: trigger
#               id: "l2_trv_runaway_low_bedroom"
#           sequence:
#             - action: climate.set_hvac_mode
#               target:
#                 entity_id: climate.zb_trv_bedroom_l2
#               data:
#                 hvac_mode: "auto"
#             - service: input_boolean.turn_off
#               target:
#                 entity_id: input_boolean.l2_trv_runaway_handling_in_progress_bedroom
#             - service: persistent_notification.create
#               data:
#                 title: "L2 TRV bedroom: auto resumed"
#                 message: "L2 TRV run away: TRV resumed auto mode (bedroom). Time: {{ now() }}"

#       #
#       # --------------------- default branch of choose:
#       default:
#         - service: system_log.write
#           data:
#             message: "Automation L2 TRV run away handling experienced unknown trigger @ {{ (now().timestamp()) | timestamp_custom('%Y%m%d%H%M%S') }}"
#             level: "error"
#             logger: "system_log.external"
#         - service: persistent_notification.create
#           data:
#             title: "L2 TRV run away automation unknown activity"
#             message: "The automation experienced an unknown condition. See system log for details. Time: {{ now() }}"

# - alias: Batterie+ Info Batteriewechsel
#   description: "Batterie+ Info Batteriewechsel"
#   triggers:
#     - alias: Battery went low
#       trigger: event
#       event_type: battery_notes_battery_threshold
#       event_data:
#         battery_low: true
#       id: low
#     - trigger: event
#       event_type: battery_notes_battery_threshold
#       event_data:
#         battery_low: false
#       id: high
#       alias: Battery went high
#   conditions: []
#   actions:
#     - choose:
#         - conditions:
#             - condition: trigger
#               id:
#                 - low
#           sequence:
#             - action: persistent_notification.create
#               data:
#                 title: |
#                   {{ trigger.event.data.device_name }} Batterie niedrig
#                 notification_id: >-
#                   {{ trigger.event.data.device_id }}-{{
#                   trigger.event.data.source_entity_id }}
#                 message: >
#                   Die Batterie hat noch {{ trigger.event.data.battery_level }}% {{
#                   '\n' -}} Du benötigst {{ trigger.event.data.battery_quantity }}
#                   × {{ trigger.event.data.battery_type }}
#             - action: notify.mobile_app_iphone
#               metadata: {}
#               data:
#                 title: |
#                   {{ trigger.event.data.device_name }} Batterie niedrig
#                 message: >
#                   Die Batterie hat noch {{ trigger.event.data.battery_level }}% {{
#                   '\n' -}} Du benötigst {{ trigger.event.data.battery_quantity }}
#                   × {{ trigger.event.data.battery_type }}
#         - conditions:
#             - condition: trigger
#               id:
#                 - high
#           sequence:
#             - action: persistent_notification.dismiss
#               data:
#                 notification_id: >-
#                   {{ trigger.event.data.device_id }}-{{
#                   trigger.event.data.source_entity_id }}
#   mode: queued

# - alias: Batterie Status nicht gemeldet
#   description: "Batterie Status nicht gemeldet"
#   triggers:
#     - trigger: event
#       event_type: battery_notes_battery_not_reported
#   conditions: []
#   actions:
#     - action: persistent_notification.create
#       data:
#         title: |
#           {{ trigger.event.data.device_name }} Battery Not Reported
#         message: >
#           The device has not reported its battery level for {{
#           trigger.event.data.battery_last_reported_days }} days {{ '\n' -}} Its
#           last reported level was {{
#           trigger.event.data.battery_last_reported_level }}% {{ '\n' -}} You need
#           {{ trigger.event.data.battery_quantity }}× {{
#           trigger.event.data.battery_type }}
#   mode: queued
#   max: 30

#
# Batterie Dashboard Übersicht mit Markdown Karte
#

# {% set ns_batteries = namespace(batteries={}) %}
# {% for entity_id in integration_entities('battery_notes') if entity_id is search('_battery_type$', ignorecase=False) -%}
#     {% set battery_type = states[entity_id].state %}
#     {% set battery_split = battery_type.split('x') %}
#     {% if battery_split | length > 1 %}
#       {% set battery_type = battery_split[-1] | trim %}
#       {% set battery_count = battery_split[0] | int(1) %}
#     {% else %}
#       {% set battery_count = 1 %}
#     {% endif %}
#     {% if battery_type not in ns_batteries.batteries %}
#         {% set ns_batteries.batteries = dict(ns_batteries.batteries, **{battery_type: battery_count}) %}
#       {% else %}
#         {% set ns_batteries.batteries = dict(ns_batteries.batteries, **{battery_type: ns_batteries.batteries[battery_type] + battery_count}) %}
#     {% endif %}
# {% endfor %}

# | Type | Count |
# | :-- | --: |
# {% for bt in ns_batteries.batteries | dictsort(False, 'value') | reverse -%}
#   | {{ bt[0] }} | {{ [bt][0][1] }} |
# {% endfor %}
