####################################################################
####################################################################
#
# ble_temperature_humidity tab --- lovelace configuration
#
####################################################################
####################################################################

icon: mdi:battery
title: Battery Status
path: battery_status
badges: []
cards:
  - type: vertical-stack
    cards:
      - type: custom:battery-state-card
        colors:
          steps:
            - "#ff0000"
            - "#ffff00"
            - "#00ff00"
          gradient: true
        secondary_info: "{attributes.battery_type_and_quantity}"
        round: 0
        filter:
          include:
            - name: entity_id
              value: "*_battery_plus"
          exclude:
            - name: state
              value: 55
              operator: ">"
            - name: state
              value: 21
              operator: "<"
        bulk_rename:
          - from: Batterie+
        sort:
          - state
          - name
      - type: markdown
        content: >
          ## Batteries

          {% set ns_batteries = namespace(batteries={}) %}
          {% for entity_id in integration_entities('battery_notes') if entity_id is search('_battery_type$', ignorecase=False) -%}
            {% set battery_type = states[entity_id].state %}
            {% set battery_split = battery_type.split('×') %}
            {% if battery_split | length > 1 %}
              {% set battery_type = battery_split[-1] | trim %}
              {% set battery_count = battery_split[0] | int(1) %}
            {% else %}
              {% set battery_count = 1 %}
            {% endif %}
            {% if battery_type not in ns_batteries.batteries %}
                {% set ns_batteries.batteries = dict(ns_batteries.batteries, **{battery_type: battery_count}) %}
              {% else %}
                {% set ns_batteries.batteries = dict(ns_batteries.batteries, **{battery_type: ns_batteries.batteries[battery_type] + battery_count}) %}
            {% endif %}
          {% endfor %}

          | Type | Count |
          | :-- | --: |
          {% for bt in ns_batteries.batteries | dictsort(False, 'value') | reverse -%}
            | {{ bt[0] }} | {{ [bt][0][1] }} |
          {% endfor %}

      - type: entities
        title: Batterie Suchbegriff
        show_header_toggle: false
        entities:
          - input_text.batterie_suche

      - type: markdown
        content: >
          ## Battery searching

          {% set search_term = states('input_text.batterie_suche') | upper %}
          {% if search_term != "" %}
            {% set devices = states | selectattr('attributes.battery_type', 'defined') 
                                      | selectattr('entity_id', 'search', '_battery_type$') | list %}
            {% set matching_devices = devices | selectattr('attributes.battery_type', 'string') 
                                                | selectattr('attributes.battery_type', 'eq', search_term) 
                                                | map(attribute='name') | unique | list %}
            {% if matching_devices | length > 0 %}
              {{ matching_devices | join('\n') }}
            {% else %}
              Keine Geräte mit diesem Batterie-Typ gefunden
            {% endif %}
          {% else %}
            Geräteliste
          {% endif %}
