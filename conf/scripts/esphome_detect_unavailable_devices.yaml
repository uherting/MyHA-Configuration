# ############################################################
#
#  ESPHome - unavailable devices notification
#
#  Purpose:
#   - finding unavailable espHome devices
#   - sending text into a Telegram group with the names of the unavailable devices
#
# ############################################################

esphome_detect_unavailable_devices_main:
  alias: Detect unavailable ESPHome devices
  icon: mdi:controller-classic-outline
  description: This script detects unavailable ESPHome devices
  # TODO: Q: what is this "{{ 0 }}" for???
  # variables:
  #   state: "{{ 0 }}"
  # in case a message needs to be send we need additional data
  # for details see script file telegram_messaging.yaml
  fields:
    msg_title:
      description: "The title of the notification"
      advanced: true
      required: true
      example: "State change"
      default: "default msg title"
      # selector: text
    msg_text:
      description: "The message content"
      advanced: true
      required: true
      example: "The light is on!"
      default: "default msg text"
    msg_receiver:
      description: "The receiver of the message"
      advanced: true
      required: false
      example: "admin"
      default: "admin"
  mode: queued
  sequence:
    - service: input_text.set_value
      target:
        entity_id: input_text.esphome_unavailable_devices_text
      # create a kind of formatted list (as string) of binary_sensor.l*_status entities
      #
      # the code below does not work here but in the template test area
      #
      # note: the regex_replace filter seems to be brutal, but as I do not know how to go from the entity to the device it is a kind of valid solution for now
      #
      # if the following code is put in the data: section it works:
      # value: |
      #   {%- set uh_test_string="TTTTTT" -%}
      #   {{ uh_test_string }}
      #
      # this works, too:
      # value: |
      #   {%- set uh_test_string="TTUUUT" -%}
      #   {%- set uh_test_string_repl=uh_test_string | regex_replace(find='U', replace='X', ignorecase=False)  -%}
      #   {{ uh_test_string_repl }}
      #
      # but as soon as the value is based on entities the input_text.set_value service does not set the value
      # value: |
      #   {%- set all_status_entities_list = states.binary_sensor | selectattr('state', 'in', ['unavailable', 'unknown', 'off']) | selectattr("entity_id", "match", "binary_sensor.l[0,2,9].*_status") | map(attribute="entity_id") | list -%}
      #   {%- set all_status_entities_string=all_status_entities_list | join('\n- ') | regex_replace(find='_status', replace='', ignorecase=False)-%}
      #   - {{ all_status_entities_string  }}
      data:
        value: >-
          {%- set all_status_entities_list = states.binary_sensor | selectattr('state', 'in', ['unavailable', 'unknown', 'off']) | selectattr("entity_id", "match", "binary_sensor.l[0,2,9].*_status") | map(attribute="entity_id") | list -%}
          {%- set all_status_entities_string=all_status_entities_list | join('\n- ') | regex_replace(find='_status', replace='', ignorecase=False)-%}
          - {{ all_status_entities_string  }}
    - service: script.tg_txt
      data_template:
        msg_title: "*{{ msg_title }}*"
        msg_text: "DEBUG: {{ msg_text }} {{ states('input_text.esphome_unavailable_devices_text') }} ###"
        msg_receiver: "{{ msg_receiver }}"

        # value: |
        #   {%- set uh_test_string="TTTTTT" -%}
        #   {{ uh_test_string }}
        # works
        # value: "TestVal"
        # not working:
        # value: |
        #   {%- set ns=namespace(entities=[],msg_yn=false, entity_string='') -%}
        #   {%- set e =  states.binary_sensor | selectattr('state', 'in', ['unavailable', 'unknown', 'off']) -%}
        #   {%- for state in e -%}
        #   {%- if state.entity_id.startswith('binary_sensor.l') -%}
        #   {%- if state.entity_id.endswith('status') -%}
        #   {%- if ns.entities|length == 0 -%}
        #   {%- set ns.entity_string = state.entity_id -%}
        #   {%- else -%}
        #   {%- set ns.entity_string = state.entity_id + '; ' + ns.entity_string -%}
        #   {%- endif -%}
        #   {%- set ns.entities = ns.entities + [state.entity_id] -%}
        #   {%- set ns.msg_yn = true -%}
        #   {%- endif -%}
        #   {%- endif -%}
        #   {%- endfor -%}
        #   {{ ns.entity_string }}
    # - service: input_text.set_value
    #   target:
    #     entity_id: input_text.esphome_unavailable_devices_markdowntext
    #   data:
    #     value: "{{ states('input_text.esphome_unavailable_devices_text') }}"

    # - choose:
    #     # if the sensor texts are not equal, then ...
    #     - conditions:
    #         - condition: template
    #           value_template: "{{ states('input_text.esphome_unavailable_devices_old_text') != states('input_text.esphome_unavailable_devices_text') }}"
    #       sequence:
    #         - service: input_text.set_value
    #           target:
    #             entity_id: input_text.esphome_unavailable_devices_old_text
    #           data:
    #             value: "{{ states('input_text.esphome_unavailable_devices_text') }}"
    #         - service: script.tg_txt
    #           data_template:
    #             msg_title: "*{{ msg_title }}*"
    #             msg_text: "{{ msg_text }} {{ states('input_text.esphome_unavailable_devices_text') }}"
    #             msg_receiver: "{{ msg_receiver }}"
    #     # if the sensor texts are equal, then ...
    #     - conditions:
    #         - condition: template
    #           value_template: "{{ states('input_text.esphome_unavailable_devices_old_text') == states('input_text.esphome_unavailable_devices_text') }}"
    #       sequence:
    #         - service: notify.tg_admin_grp
    #           data_template:
    #             title: "{{ msg_title }}"
    #             message: >
    #               {{ msg_text }} @ {{ (now().timestamp()) | timestamp_custom('%Y%m%d%H%M%S') }}
    #               EQUAL - EOM
    #   default:
    #     - delay: 00:00:01
# ############################################################
#  END OF FILE
# ############################################################
