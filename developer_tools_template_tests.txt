---------------
# content of: /config/developer_tools_template_tests.txt
---------------

# check whether we are in summer
{% set cold_season = is_state('sensor.season', 'summer') %}
{{ cold_season }}

# only if the cam is online and online longer than x minutes
{{ states("binary_sensor.l9_cam32_03_status") }}
{{ (now() - states.binary_sensor.l9_cam32_03_status.last_changed) > timedelta(hours = 0, minutes = 10) }}

{{ states.binary_sensor.l9_cam32_03_status.last_changed }}
{{ (now() - states.binary_sensor.l9_cam32_03_status.last_changed)  }}

{{ timedelta(hours = 0, minutes = 10) }}
{{ now() - states.binary_sensor.l9_cam32_03_status.last_changed }}
{{ (now() - states.binary_sensor.l9_cam32_03_status.last_changed) > timedelta(hours = 0, minutes = 10) }}

{{ now() }}
{{ now().timestamp() }}

{{ "\n123" | length }}

{{ states("counter.homeassistant_warnings") }}
{{ states("counter.homeassistant_errors") }}

{{ (state_attr('sensor.unavailable_esphome_devices_info', 'unavailable_device_names') | length()) > 1 }}

{{ states.sensor.unavailable_esphome_devices_info.last_updated }}
{{ states.sensor.unavailable_esphome_devices_info.last_changed }}

{% if is_state("sun.sun", "above_horizon") -%}
  The sun rose {{ relative_time(states.sun.sun.last_changed) }} ago.
{%- else -%}
  The sun will rise at {{ as_timestamp(state_attr("sun.sun", "next_rising")) | timestamp_local }}.
{%- endif %}

For loop example getting entity values in the weather domain:

{% for state in states.weather -%}
  {%- if loop.first %}The {% elif loop.last %} and the {% else %}, the {% endif -%}
  {{ state.name | lower }} is {{state.state_with_unit}}
{%- endfor %}.

# using a regex
# from https://community.home-assistant.io/t/jinja-template-regex-to-narrow-list-of-sensors/271402/2
###########################################################################
{% set ns = namespace(update_sensors=[],on_sensors=(states.binary_sensor | selectattr('state', 'eq', 'on') | list)) %}
{% for s in ns.on_sensors %}
  {% if "update" in s.name | lower or "update" in s.entity_id %}
    {% set ns.update_sensors = ns.update_sensors + [s] %}
  {% endif %}
{% endfor %}
{{ ns.update_sensors | map(attribute="entity_id") | unique | join(", ") }} {% set ns = namespace(update_sensors=[],on_sensors=(states.binary_sensor | selectattr('state', 'eq', 'on') | list)) %}
{% for s in ns.on_sensors %}
  {% if "update" in s.name | lower or "update" in s.entity_id %}
    {% set ns.update_sensors = ns.update_sensors + [s] %}
  {% endif %}
{% endfor %}
{{ ns.update_sensors | map(attribute="entity_id") | unique | join(", ") }} 

# test only
###########################################################################
{%- set ns=namespace(entities_final=[], entities=[], entity_string='', msg_yn=false) -%}
{%- set ns.entities = states.binary_sensor | selectattr('attributes.device_class', '==', 'connectivity') -%}
{%- for state in ns.entities -%}
{{ state.name }}
{% endfor %}

# esphome-unplugged-devices
###########################################################################
{%- set ns=namespace(entities_final=[], entities=[], entity_string='', msg_yn=false) -%}
{%- set ns.entities = states.binary_sensor | selectattr('attributes.device_class', '==', 'connectivity') -%}
{%- for state in ns.entities -%}
{%- if state.entity_id.startswith("binary_sensor.l") -%}
{%- if state.entity_id.endswith("status") -%}
{%- if is_state(state.entity_id, 'off') -%}
{%- set ns.entities_final = ns.entities_final + [state.name] -%}
{%- set ns.msg_yn = true -%}
{%- endif -%}
{%- endif -%}
{%- endif -%}
{%- endfor -%}

{%- if (ns.entities_final | length) > 0 -%}
{% set ns.entity_string = ns.entities_final | sort | join(', ') | replace(" Status", "") %}
The following devices are not available in HA: {{ ns.entity_string }}
{% else %}
so far so good
{%- endif -%}

{# print the processed values #}{{ '\nresults:' }}
  - ns.entities_final: {{ ns.entities_final }}
  - ns.entity_string: {{ ns.entity_string }}
  - ns.msg_yn: send message: {{ ns.msg_yn }}

# playing around with dates
###########################################################################
{%- set d = states("sensor.Full_Moon_days_until") -%}
{%- if '0' == d -%}
{%- set d = 'today' -%}
{%- endif %}
{%- set s = states("sensor.Full_Moon_date") + " (" + d + ")" %}
{{ s }}

# battery levels from https://leonardosmarthomemakers.com/home-assistant-templating-guide/
###########################################################################
{%- set ns = namespace(sensors=[]) -%}
{%- set e = states.sensor | selectattr('attributes.device_class', '==', 'battery') -%}
{%- for state in e -%}
  {%- if 0 <= state.state | int(-1) < 10 | int  -%}
     {%- set ns.sensors = ns.sensors + [state.name ~ ' (' ~ state.state ~ ' %)'] -%}
  {%- endif -%}
{%- endfor -%}
{% if (ns.sensors |length) > 0 %}
Check the battery for {{ ns.sensors|join(', ')}}
{% else %}
so far so good
{% endif %}

# XIAOMI battery condition bad (below 10%)
###########################################################################
# boolean sensor
{{ states('sensor.xiaomi_l2_storage_battery') | int(99) < 10 }}

# bathroom window
###########################################################################
{{ states('binary_sensor.l2_bathroom01_window').startswith("off") }}
{{ is_state('binary_sensor.l2_bathroom01_window', 'off') }}
{{ (is_state('binary_sensor.l2_bathroom01_window', 'off')) and true }}
{{ (states('sensor.l2_bathroom01_tempenv_02') | float ) < 12.0 }}
final test:
{{ (is_state('binary_sensor.l2_bathroom01_window', 'off')) and ((states('sensor.l2_bathroom01_tempenv_02') | float ) < 12.0) }}
{{  (is_state('binary_sensor.l2_bathroom01_window', 'off')) 
    and 
    ((states('sensor.l2_bathroom01_tempenv_02') | float ) < 12.0)
}}

# time
###########################################################################
{{ (now().timestamp()) | timestamp_custom('%Y%m%d_%H%M%S') }}

# tell me the name of the sun based theme
###########################################################################
{{ states('sensor.sun_based_theme') }}

# variables test
###########################################################################
{% set my_test_json = {"temperature": 25,"unit": "°C"} %}The temperature is {{ my_test_json.temperature }} {{ my_test_json.unit }}.

# from an update
###########################################################################
{## Imitate available variables: ##}
{% set my_test_json = {
  "temperature": 25,
  "unit": "°C"
} %}

The temperature is {{ my_test_json.temperature }} {{ my_test_json.unit }}.

{% if is_state("sun.sun", "above_horizon") -%}
  The sun rose {{ relative_time(states.sun.sun.last_changed) }} ago.
{%- else -%}
  The sun will rise at {{ as_timestamp(state_attr("sun.sun", "next_rising")) | timestamp_local }}.
{%- endif %}

For loop example getting entity values in the weather domain:

{% for state in states.weather -%}
  {%- if loop.first %}The {% elif loop.last %} and the {% else %}, the {% endif -%}
  {{ state.name | lower }} is {{state.state_with_unit}}
{%- endfor %}.
---------------
# content of: /config/developer_tools_template_tests.txt
---------------
