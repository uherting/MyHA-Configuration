# battery levels from https://leonardosmarthomemakers.com/home-assistant-templating-guide/
###########################################################################
{%- set output = namespace(sensors=[]) -%}
{%- for state in states.sensor | selectattr('attributes.device_class', '==', 'battery') -%}
  {%- if 0 <= state.state | int(-1) < 20 | int  -%}
     {%- set output.sensors = output.sensors + [state.name ~ ' (' ~ state.state ~ ' %)'] -%}
  {%- endif -%}
{%- endfor -%}
{% if (output.sensors |length) > 1 %}
Check the battery for {{ output.sensors|join(', ')}}
{% else %}
so far so good
{% endif %}

# esphome-unplugged-devices
###########################################################################
        {# collect the entity ids #}
        {%- set ns=namespace(entities=[],msg_yn=false, entity_string='') -%}
        {%- set e =  states.binary_sensor | selectattr("state", "in", ["unavailable", "unknown", "off"]) -%}
        {%- for state in e -%}
        {%- if state.entity_id.startswith("binary_sensor.l") -%}
        {%- if state.entity_id.endswith("status") -%}
        {%- if ns.entities|length == 0 -%}
        {%- set ns.entity_string = state.entity_id -%}
        {%- else -%}
        {%- set ns.entity_string = state.entity_id + ';' + ns.entity_string -%}
        {%- endif -%}
        {%- set ns.entities = ns.entities + [state.entity_id] -%}
        {# found an unavailable entity, flip the send_a_message switch to on #}
        {%- set ns.msg_yn = true -%}
        {%- endif -%}
        {%- endif -%}
        {%- endfor -%}
        {# print the processed values #}
        {{ '\n    results:' }}
        - {{ ns.entities }}
        - {{ ns.entity_string }}
        - {{ ns.msg_yn }}
        {{ '\n    result current txt == "":' }}
        - {{ states('input_text.esphome_unavailable_sensors_text') == "" }}
        {{ '\n    result current txt == old txt:' }}
        - {{ states('input_text.esphome_unavailable_sensors_old_text') == states('input_text.esphome_unavailable_sensors_text') }}

        {{ '\n    result if statements' }}
        {# were some unavailable devices found? #}
        {%- if states('input_text.esphome_unavailable_sensors_text') == "" -%}
        {{ '\n        - current string is empty, no action necessary' }}
        {%- else -%}
        {# if old and current are equal, no action! #}
        {%- if states('input_text.esphome_unavailable_sensors_old_text') == states('input_text.esphome_unavailable_sensors_text') -%}
        {{ '\n        - old == current, no actiom ' }}
        {%- else -%}
        {{ '\n        - old != current, action required' }}
        {%- endif -%}
        {%- endif -%}
{{ '\n\n' }}


# XIAOMI battery condition bad (below 10%)
###########################################################################
# boolean sensor
{{ states('sensor.xiaomi_l2_storage_battery') | int(99) < 10 }}

# bathroom window
###########################################################################
{{ states('binary_sensor.l2_bathroom01_window').startswith("off") }}
{{ is_state('binary_sensor.l2_bathroom01_window', 'off') }}
{{ (is_state('binary_sensor.l2_bathroom01_window', 'off')) and true }}
{{ (states('sensor.l2_bathroom01_tempenv_02') | float ) < 12.0 }}
final test:
{{ (is_state('binary_sensor.l2_bathroom01_window', 'off')) and ((states('sensor.l2_bathroom01_tempenv_02') | float ) < 12.0) }}
{{  (is_state('binary_sensor.l2_bathroom01_window', 'off')) 
    and 
    ((states('sensor.l2_bathroom01_tempenv_02') | float ) < 12.0)
}}

# time
###########################################################################
{{ (now().timestamp()) | timestamp_custom('%Y%m%d_%H%M%S') }}

# tell me the name of the sun based theme
###########################################################################
{{ states('sensor.sun_based_theme') }}

# variables test
###########################################################################
{% set my_test_json = {"temperature": 25,"unit": "°C"} %}The temperature is {{ my_test_json.temperature }} {{ my_test_json.unit }}.

# from an update
###########################################################################
{## Imitate available variables: ##}
{% set my_test_json = {
  "temperature": 25,
  "unit": "°C"
} %}

The temperature is {{ my_test_json.temperature }} {{ my_test_json.unit }}.

{% if is_state("sun.sun", "above_horizon") -%}
  The sun rose {{ relative_time(states.sun.sun.last_changed) }} ago.
{%- else -%}
  The sun will rise at {{ as_timestamp(state_attr("sun.sun", "next_rising")) | timestamp_local }}.
{%- endif %}

For loop example getting entity values in the weather domain:

{% for state in states.weather -%}
  {%- if loop.first %}The {% elif loop.last %} and the {% else %}, the {% endif -%}
  {{ state.name | lower }} is {{state.state_with_unit}}
{%- endfor %}.

# misc older things
###########################################################################
{% if is_state("sun.sun", "above_horizon") -%}
  The sun rose {{ relative_time(states.sun.sun.last_changed) }} ago.
{%- else -%}
  The sun will rise at {{ as_timestamp(strptime(state_attr("sun.sun", "next_rising"), "")) | timestamp_local }}.
{%- endif %}

For loop example getting entity values in the weather domain:

{% for state in states.weather -%}
  {%- if loop.first %}The {% elif loop.last %} and the {% else %}, the {% endif -%}
  {{ state.name | lower }} is {{state.state_with_unit}}
{%- endfor %}.
